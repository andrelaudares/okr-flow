from fastapi import FastAPI
from fastapi.middleware.cors import CORSMiddleware
from contextlib import asynccontextmanager
import signal
import sys
from .routers import auth, users, subscriptions, companies, cycles, dashboard, objectives, key_results, reports, analytics, notifications

# Lifecycle manager para startup/shutdown
@asynccontextmanager
async def lifespan(app: FastAPI):
    # Startup
    print("üöÄ Sistema OKR Backend iniciando...")
    yield
    # Shutdown
    print("üõë Sistema OKR Backend finalizando...")

app = FastAPI(
    title="Sistema OKR - Backend API", 
    version="1.0.0",
    description="Backend para sistema de gest√£o de OKRs com autentica√ß√£o hier√°rquica",
    lifespan=lifespan
)

# Configurar CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://localhost:5173", "http://localhost:8080", "http://127.0.0.1:5173", "http://127.0.0.1:8080"],  # Frontend URLs
    allow_credentials=True,
    allow_methods=["GET", "POST", "PUT", "DELETE", "OPTIONS"],
    allow_headers=["*"],
)

# Incluir os roteadores com prefixos da API
app.include_router(auth.router, prefix="/api/auth", tags=["Autentica√ß√£o"])
app.include_router(users.router, prefix="/api/users", tags=["Usu√°rios"])
app.include_router(companies.router, prefix="/api/companies", tags=["Empresas"])
app.include_router(cycles.router, prefix="/api/cycles", tags=["Ciclos"])
app.include_router(objectives.router, prefix="/api/objectives", tags=["Objetivos"])
app.include_router(key_results.router, prefix="/api/objectives", tags=["Key Results"])
app.include_router(dashboard.router, prefix="/api/dashboard", tags=["Dashboard"])
app.include_router(reports.router, prefix="/api/reports", tags=["Relat√≥rios"])
app.include_router(analytics.router, tags=["Analytics"])
app.include_router(notifications.router, prefix="/api/notifications", tags=["Notifica√ß√µes"])
app.include_router(subscriptions.router, prefix="/api/subscriptions", tags=["Assinaturas"])

@app.get("/", summary="Health Check")
async def read_root():
    return {
        "status": "API est√° online",
        "version": "1.0.0",
        "sprint": "Sprint 9 - Sistema de Notifica√ß√µes e Integra√ß√µes"
    }

@app.get("/health", summary="Health Check Detalhado")
async def health_check():
    return {
        "status": "healthy",
        "version": "1.0.0",
        "sprint": "Sprint 9",
        "features": [
            "Autentica√ß√£o com Supabase",
            "Registro de usu√°rio owner",
            "Gest√£o hier√°rquica de usu√°rios",
            "Sistema de permiss√µes",
            "CRUD completo de usu√°rios",
            "Gest√£o de empresas",
            "Sistema de ciclos temporais",
            "Cards est√°ticos do dashboard",
            "CRUD completo de objetivos",
            "Sistema de filtros e busca",
            "CRUD completo de Key Results",
            "Sistema de check-ins",
            "C√°lculo autom√°tico de progresso",
            "Dashboard cards vari√°veis",
            "Estat√≠sticas em tempo real",
            "M√©tricas de progresso",
            "Contadores de objetivos",
            "Evolu√ß√£o temporal",
            "Sistema de relat√≥rios",
            "Exporta√ß√£o em m√∫ltiplos formatos",
            "Gera√ß√£o em background",
            "Download de arquivos",
            "Sistema de hist√≥rico e analytics",
            "An√°lise de tend√™ncias",
            "M√©tricas de performance",
            "Insights autom√°ticos",
            "Evolu√ß√£o temporal de objetivos",
            "Sistema de notifica√ß√µes",
            "Alertas autom√°ticos",
            "Configura√ß√µes de notifica√ß√£o por usu√°rio",
            "Notifica√ß√µes de check-in pendente",
            "Notifica√ß√µes de objetivo atrasado",
            "Notifica√ß√µes de fim de ciclo",
            "Notifica√ß√µes de meta atingida",
            "Estat√≠sticas de notifica√ß√µes",
            "Filtros e pagina√ß√£o de notifica√ß√µes"
        ]
    }

# Handler para shutdown graceful
def signal_handler(signum, frame):
    print(f"\nüõë Recebido sinal {signum}. Finalizando servidor...")
    sys.exit(0)

# Registrar handlers de sinal
signal.signal(signal.SIGINT, signal_handler)
signal.signal(signal.SIGTERM, signal_handler)

# Nota: Para rodar esta aplica√ß√£o, voc√™ precisar√° de um arquivo .env
# com as vari√°veis SUPABASE_URL, SUPABASE_KEY, SUPABASE_SERVICE_KEY e ASAAS_API_KEY.
# Use `uvicorn app.main:app --reload --timeout-keep-alive 30` no diret√≥rio backend/ 