# Configura√ß√£o do Gunicorn para produ√ß√£o
# Uso: gunicorn -c gunicorn.conf.py app.main:app

import os
import multiprocessing

# Configura√ß√µes b√°sicas
bind = f"0.0.0.0:{os.getenv('PORT', '8000')}"
workers = int(os.getenv('WEB_CONCURRENCY', multiprocessing.cpu_count() * 2 + 1))
worker_class = "uvicorn.workers.UvicornWorker"
worker_connections = 1000

# Configura√ß√µes de timeout
timeout = 120
keepalive = 5
graceful_timeout = 30

# Configura√ß√µes de logging
accesslog = "-"
errorlog = "-"
loglevel = "info"
access_log_format = '%(h)s %(l)s %(u)s %(t)s "%(r)s" %(s)s %(b)s "%(f)s" "%(a)s" %(D)s'

# Configura√ß√µes de processo
preload_app = True
max_requests = 1000
max_requests_jitter = 100

# Configura√ß√µes de mem√≥ria
worker_tmp_dir = "/dev/shm"

# Hooks
def when_ready(server):
    server.log.info("üöÄ Servidor OKR Backend pronto para receber conex√µes")

def worker_int(worker):
    worker.log.info("üõë Worker interrompido graciosamente")

def on_exit(server):
    server.log.info("üëã Servidor OKR Backend finalizado") 