#!/usr/bin/env python3
"""
Script de monitoramento da sa√∫de dos tokens JWT do Supabase
Pode ser executado de forma independente para verificar problemas
"""
import asyncio
import time
import os
import sys
from pathlib import Path

# Adicionar o diret√≥rio do app ao path
sys.path.insert(0, str(Path(__file__).parent))

async def monitor_jwt_health():
    """Monitora a sa√∫de dos JWTs e renova quando necess√°rio"""
    from app.utils.supabase import (
        check_connection, 
        get_connectivity_status, 
        refresh_all_connections,
        get_admin_client,
        _test_client_health
    )
    
    print("üîç JWT Health Monitor iniciado")
    print("=" * 50)
    
    while True:
        try:
            print(f"\n‚è∞ Verifica√ß√£o em {time.strftime('%H:%M:%S')}")
            
            # Verificar status geral
            connectivity = get_connectivity_status()
            connection_ok = check_connection()
            
            print(f"üìä Status geral: {'‚úÖ OK' if connection_ok else '‚ùå PROBLEMA'}")
            print(f"üìä Credenciais configuradas: {'‚úÖ' if connectivity['credentials_configured'] else '‚ùå'}")
            print(f"üìä Falhas consecutivas: {connectivity['consecutive_failures']}")
            print(f"üìä √öltimos {connectivity['error_count']} erros")
            
            if connectivity['last_error']:
                print(f"üìä √öltimo erro: {connectivity['last_error']}")
            
            # Testar cliente admin especificamente
            try:
                admin_client = get_admin_client()
                admin_healthy = _test_client_health(admin_client) if admin_client else False
                print(f"üîë JWT Admin: {'‚úÖ Saud√°vel' if admin_healthy else '‚ùå Expirado/Problem√°tico'}")
                
                if not admin_healthy and connectivity['credentials_configured']:
                    print("üîß Renovando conex√µes...")
                    refresh_all_connections()
                    
                    # Testar novamente
                    time.sleep(2)
                    admin_client_new = get_admin_client()
                    admin_healthy_new = _test_client_health(admin_client_new) if admin_client_new else False
                    print(f"üîë JWT Admin p√≥s-renova√ß√£o: {'‚úÖ Saud√°vel' if admin_healthy_new else '‚ùå Ainda com problemas'}")
                    
            except Exception as e:
                print(f"‚ùå Erro ao testar JWT Admin: {e}")
            
            # Aguardar 2 minutos entre verifica√ß√µes
            print("‚è≥ Pr√≥xima verifica√ß√£o em 2 minutos...")
            await asyncio.sleep(120)
            
        except KeyboardInterrupt:
            print("\nüõë Monitor interrompido pelo usu√°rio")
            break
        except Exception as e:
            print(f"‚ùå Erro no monitor: {e}")
            await asyncio.sleep(30)  # Aguardar 30s em caso de erro

async def run_single_check():
    """Executa uma √∫nica verifica√ß√£o da sa√∫de dos JWTs"""
    from app.utils.supabase import (
        check_connection, 
        get_connectivity_status, 
        refresh_all_connections,
        get_admin_client,
        _test_client_health
    )
    
    print("üîç Verifica√ß√£o √∫nica da sa√∫de dos JWTs")
    print("=" * 50)
    
    # Status geral
    connectivity = get_connectivity_status()
    connection_ok = check_connection()
    
    print(f"üìä Status geral: {'‚úÖ OK' if connection_ok else '‚ùå PROBLEMA'}")
    print(f"üìä Ambiente: {connectivity['environment']}")
    print(f"üìä Credenciais configuradas: {'‚úÖ' if connectivity['credentials_configured'] else '‚ùå'}")
    print(f"üìä Falhas consecutivas: {connectivity['consecutive_failures']}")
    print(f"üìä Intervalo de renova√ß√£o: {connectivity['refresh_interval']}s")
    
    if connectivity['last_error']:
        print(f"üìä √öltimo erro: {connectivity['last_error']}")
    
    # Testar JWT Admin
    try:
        admin_client = get_admin_client()
        admin_healthy = _test_client_health(admin_client) if admin_client else False
        print(f"üîë JWT Admin: {'‚úÖ Saud√°vel' if admin_healthy else '‚ùå Expirado/Problem√°tico'}")
        
        if not admin_healthy and connectivity['credentials_configured']:
            print("üîß Tentando renovar conex√µes...")
            refresh_all_connections()
            
            # Testar novamente
            time.sleep(1)
            admin_client_new = get_admin_client()
            admin_healthy_new = _test_client_health(admin_client_new) if admin_client_new else False
            print(f"üîë JWT Admin p√≥s-renova√ß√£o: {'‚úÖ Saud√°vel' if admin_healthy_new else '‚ùå Ainda com problemas'}")
            
            return admin_healthy_new
        
        return admin_healthy
        
    except Exception as e:
        print(f"‚ùå Erro ao testar JWT Admin: {e}")
        return False

if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] == "--single":
        # Executar verifica√ß√£o √∫nica
        result = asyncio.run(run_single_check())
        sys.exit(0 if result else 1)
    else:
        # Executar monitor cont√≠nuo
        try:
            asyncio.run(monitor_jwt_health())
        except KeyboardInterrupt:
            print("\n‚úÖ Monitor finalizado")
            sys.exit(0) 